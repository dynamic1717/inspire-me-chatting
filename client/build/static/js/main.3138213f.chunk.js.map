{"version":3,"sources":["components/Header.jsx","hooks/useChat.js","hooks/useBeforeUnload.js","components/Messages.jsx","components/NewChat.jsx","hooks/useLocalStorage.js","redux/quoteSlice.js","components/Quotes.jsx","App.js","saga/quoteSaga.js","saga/index.js","redux/index.js","index.js"],"names":["Header","className","SERVER_URL","window","location","href","useChat","userId","username","roomId","useState","users","setUsers","messages","setMessages","socketRef","useRef","useEffect","current","io","query","onAny","event","args","console","log","emit","on","newMessages","map","msg","currentUser","disconnect","value","handleBeforeUnload","e","returnValue","preventDefault","addEventListener","removeEventListener","useBeforeUnload","sendMessage","messageText","senderName","removeMessage","id","Messages","userData","messagesEndRef","scrollIntoView","behavior","ListGroup","variant","Item","onClick","messageId","date","createdAt","ref","NewChat","name","setName","key","initialValue","item","localStorage","getItem","JSON","parse","setValue","stringify","setItem","useLocalStorage","setUserData","text","setText","activeUsers","Object","values","filter","u","online","length","InputGroup","Form","Control","type","onChange","target","Append","Button","nanoid","Group","as","rows","disabled","style","resize","trim","quoteSlice","createSlice","initialState","randomQuote","reducers","setQuote","state","action","payload","fetchQuote","actions","Quotes","useSelector","quote","dispatch","useDispatch","author","App","fetchQuoteWorker","quoteWatcher","fetchQuoteFromApi","fetch","call","data","Promise","res","json","Math","floor","random","randomNum","put","takeEvery","rootWatcher","all","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3138213f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header className='header text-center'>\r\n      <h2>Inspire.Me Chatting</h2>\r\n    </header>\r\n  )\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { useBeforeUnload } from './useBeforeUnload'\r\n\r\nconst SERVER_URL = window.location.href\r\n\r\nexport const useChat = (userId, username, roomId) => {\r\n  const [users, setUsers] = useState([])\r\n  const [messages, setMessages] = useState([])\r\n\r\n  const socketRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io(SERVER_URL, {\r\n      query: roomId,\r\n    })\r\n\r\n    socketRef.current.onAny((event, ...args) => {\r\n      console.log(event, args)\r\n    })\r\n\r\n    if (userId) {\r\n      socketRef.current.emit('user:add', { username, userId })\r\n    }\r\n\r\n    socketRef.current.on('users', (users) => {\r\n      setUsers(users)\r\n    })\r\n\r\n    socketRef.current.emit('message:get')\r\n\r\n    socketRef.current.on('messages', (messages) => {\r\n      const newMessages = messages.map((msg) =>\r\n        msg.userId === userId ? { ...msg, currentUser: true } : msg\r\n      )\r\n      setMessages(newMessages)\r\n    })\r\n\r\n    return () => socketRef.current.disconnect()\r\n  }, [roomId, userId, username])\r\n\r\n  const sendMessage = ({ messageText, senderName }) => {\r\n    socketRef.current.emit('message:add', { userId, messageText, senderName })\r\n  }\r\n\r\n  const removeMessage = (id) => {\r\n    socketRef.current.emit('message:remove', id)\r\n  }\r\n\r\n  useBeforeUnload(() => {\r\n    socketRef.current.emit('user:leave', userId)\r\n  })\r\n\r\n  return { users, messages, sendMessage, removeMessage }\r\n}\r\n","import { useEffect } from 'react'\r\n\r\nexport const useBeforeUnload = (value) => {\r\n  const handleBeforeUnload = (e) => {\r\n    let returnValue\r\n    if (typeof returnValue === 'function') {\r\n      returnValue = value(e)\r\n    } else {\r\n      returnValue = value\r\n    }\r\n    if (returnValue) {\r\n      e.preventDefault()\r\n      e.returnValue = returnValue\r\n    }\r\n    return returnValue\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('beforeunload', handleBeforeUnload)\r\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload)\r\n    // eslint-disable-next-line\r\n  }, [])\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport TimeAgo from 'react-timeago'\r\n\r\nconst Messages = ({ userData, messages, removeMessage }) => {\r\n  const messagesEndRef = useRef()\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }, [messages])\r\n\r\n  return (\r\n    <div className='chat__messages overflow-auto'>\r\n      <ListGroup variant='flush'>\r\n        {messages.map((msg) => (\r\n          <ListGroup.Item\r\n            key={msg.messageId}\r\n            className='chat__message-item d-flex justify-content-between p-2'\r\n          >\r\n            <p>\r\n              <strong>{msg.senderName}</strong>: {msg.messageText}\r\n            </p>\r\n            {userData?.userId === msg.userId && (\r\n              <button\r\n                className='chat__message-del'\r\n                onClick={() => removeMessage(msg.messageId)}\r\n              >\r\n                &times;\r\n              </button>\r\n            )}\r\n            <TimeAgo date={msg.createdAt} className='text-muted' />\r\n          </ListGroup.Item>\r\n        ))}\r\n      </ListGroup>\r\n      <span ref={messagesEndRef}></span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages\r\n","import React, { useState } from 'react'\r\nimport { nanoid } from 'nanoid'\r\nimport { Button, Form, InputGroup } from 'react-bootstrap'\r\nimport { useChat } from '../hooks/useChat'\r\nimport { useLocalStorage } from '../hooks/useLocalStorage'\r\nimport Messages from './Messages'\r\n\r\nconst NewChat = () => {\r\n  const [name, setName] = useState('')\r\n  const [userData, setUserData] = useLocalStorage('inspire-me-userData')\r\n  const [roomId, setRoomId] = useState('general')\r\n  const { users, messages, sendMessage, removeMessage } = useChat(\r\n    userData?.userId,\r\n    userData?.username,\r\n    roomId\r\n  )\r\n  const [text, setText] = useState('')\r\n\r\n  const activeUsers = Object.values(users).filter((u) => u.online).length\r\n\r\n  console.log(users)\r\n\r\n  const handleChangeName = (e) => {\r\n    setName(e.target.value)\r\n  }\r\n\r\n  const handleSetUsername = () => {\r\n    setUserData({ username: name, userId: nanoid(8) })\r\n  }\r\n\r\n  const handleChangeText = (e) => {\r\n    setText(e.target.value)\r\n  }\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault()\r\n    const trimmed = text.trim()\r\n    if (trimmed) {\r\n      sendMessage({ messageText: text, senderName: userData.username })\r\n      setText('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='chat'>\r\n      <div className='chat__wrapper'>\r\n        {!userData && (\r\n          <div className='chat__login text-center'>\r\n            <p>Enter your name and start chatting!</p>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type='text'\r\n                name='username'\r\n                id='username'\r\n                value={name}\r\n                onChange={handleChangeName}\r\n              />\r\n              <InputGroup.Append>\r\n                <Button variant='info' onClick={handleSetUsername}>\r\n                  Start Chatting\r\n                </Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </div>\r\n        )}\r\n\r\n        <div className='chat__header'>\r\n          <p className='m-0'>Users online: {activeUsers}</p>\r\n          <h4 className='text-center'>Real-Time Chat</h4>\r\n          <p className='m-0'>You: {userData?.username}</p>\r\n        </div>\r\n\r\n        <Messages\r\n          userData={userData}\r\n          messages={messages}\r\n          removeMessage={removeMessage}\r\n        />\r\n\r\n        <Form>\r\n          <Form.Group>\r\n            <InputGroup>\r\n              <Form.Control\r\n                as='textarea'\r\n                rows={1}\r\n                name='text'\r\n                id='text'\r\n                value={text}\r\n                onChange={handleChangeText}\r\n                disabled={!userData}\r\n                style={{ resize: 'none' }}\r\n              />\r\n              <InputGroup.Append>\r\n                <Button\r\n                  type='submit'\r\n                  onClick={handleSendMessage}\r\n                  disabled={!userData}\r\n                  variant='info'\r\n                >\r\n                  Send\r\n                </Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewChat\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  const [value, setValue] = useState(() => {\r\n    const item = window.localStorage.getItem(key)\r\n    return item ? JSON.parse(item) : initialValue\r\n  })\r\n\r\n  useEffect(() => {\r\n    const item = JSON.stringify(value)\r\n    item && window.localStorage.setItem(key, item)\r\n    //eslint-disable-next-line\r\n  }, [value])\r\n\r\n  return [value, setValue]\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst quoteSlice = createSlice({\r\n  name: 'quote',\r\n  initialState: {\r\n    randomQuote: null,\r\n  },\r\n  reducers: {\r\n    setQuote(state, action) {\r\n      state.randomQuote = action.payload\r\n    },\r\n    fetchQuote(state) {},\r\n  },\r\n})\r\n\r\nexport default quoteSlice.reducer\r\n\r\nexport const { setQuote, fetchQuote } = quoteSlice.actions\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchQuote } from '../redux/quoteSlice'\r\n\r\nexport const Quotes = () => {\r\n  const { randomQuote } = useSelector((state) => state.quote)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleChangeQuote = () => {\r\n    dispatch(fetchQuote())\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchQuote())\r\n  }, [dispatch])\r\n\r\n  if (!randomQuote) {\r\n    return (\r\n      <div className='quote'>\r\n        <div className='quote__wrapper'>\r\n          <h4 className='quote__text'>Loading...</h4>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='quote'>\r\n      <div className='quote__wrapper'>\r\n        <h4 className='quote__text'>{randomQuote.text}</h4>\r\n        <p className='quote__author'>{randomQuote.author}</p>\r\n        <button className='quote__btn' onClick={handleChangeQuote}>\r\n          click here to get another quote\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport { Header } from './components/Header'\nimport NewChat from './components/NewChat'\nimport { Quotes } from './components/Quotes'\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Quotes />\n      <NewChat />\n    </>\n  )\n}\n\nexport default App\n","import { call, put, takeEvery } from 'redux-saga/effects'\r\nimport { fetchQuote, setQuote } from '../redux/quoteSlice'\r\n\r\nconst fetchQuoteFromApi = () => fetch('https://type.fit/api/quotes')\r\n\r\nfunction* fetchQuoteWorker() {\r\n  const data = yield call(fetchQuoteFromApi)\r\n  const json = yield call(() => new Promise((res) => res(data.json())))\r\n  const randomNum = yield Math.floor(Math.random() * (json.length - 1))\r\n  yield put(setQuote(json[randomNum]))\r\n}\r\n\r\nexport function* quoteWatcher() {\r\n  yield takeEvery(fetchQuote.type, fetchQuoteWorker)\r\n}\r\n","import { all } from 'redux-saga/effects'\r\nimport { quoteWatcher } from './quoteSaga'\r\n\r\nexport function* rootWatcher() {\r\n  yield all([quoteWatcher()])\r\n}\r\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { rootWatcher } from '../saga'\r\nimport quoteSlice from './quoteSlice'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst rootReducer = combineReducers({\r\n  quote: quoteSlice,\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), sagaMiddleware],\r\n})\r\n\r\nsagaMiddleware.run(rootWatcher)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}